openapi: 3.0.2
info:
  title: API-First Spring Boot Example
  description: "Simple example of API-First integration in a Spring Boot application!"
  version: 1.0.0-SNAPSHOT
tags:
  - name: pets
    description: Operations with pets
  - name: tags
    description: Operations with tags
  - name: auth
    description: Authentication operations
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: log in user
      description: generate JWT
      operationId: login
      requestBody:
        description: Credentials for authentification
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
        required: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'

  /pets:
    get:
      tags:
        - pets
      summary: Get all pets
      description: Get all pets
      operationId: findAllPets
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PetDTO'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
              example:
                code: REQUEST_VALIDATION_ERROR
                error: There are some validation errors
        404:
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
components:
  schemas:
    PetDTO:
      type: object
      required:
        - name
        - type
        - color
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        type:
          type: string
        breed:
          type: string
        color:
          type: string
        size:
          enum: [mini,standard,large,XL]
        age:
          type: integer


    TagDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          example: fantasy

    AuthRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 255
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        email:
          type: string
          format: email
        token:
          type: string

    ErrorDTO:
      type: object
      properties:
        code:
          type: string
          example: BOOK_NOT_FOUND
        error:
          type: string
          example: The book was not found